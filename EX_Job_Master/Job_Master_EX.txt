//===== EinherjarRO Scripts ================================== 
//= Ex Job Master
//===== By: ================================================== 
//= Stolao
//===== Current Version: ===================================== 
//= 3.2E
//===== Compatible With: ===================================== 
//= rAthena SVN
//===== Description: ========================================= 
//= Allows players to freely swap between jobs storing
//= all stats and skill points of each job.
//= make .MenuOptions bitwise
//===== Comments: ============================================
//= [Stolao]
//= Suggest using a modified exp_db to restict/inhibit Novice training
//= Not optimized yet
//= Borrowed a snippet from Euphy's Class Mastery, modified
//= Uses Euphy's Renting, only modifed price area and setdragon;
//= Used Euphy's Skill/Stats Reseter as referance for mine
//=
//= Euphy's work can be found here
//= http://rathena.org/board/topic/64394-%E2%9C%B0-euphys-scripts-%E2%9C%B0/
//===== Known Bugs: ==========================================
//= Platnium Skills earned are lost on job change if platnium is disabled, unsure of fix
//= setdragon select() might not give you color you select, due to bug in setdragon
//= more optimization possible?
//===== Additional Comments: =================================
//= 2.-- Scipt Was far to large spannning 9500 lines :(
//= 3.00 Revamped almost from scatch
//= 3.01 Remade Save_Stats function to be dynamic
//= 3.02 Remade Load_Stats function to be dynamic
//= 3.03 Designed new config
//= 3.04 Added the .ROEAJLIST Array in config
//= 3.05 Designed new menues
//= 3.06 Added Dynamic menu using exsploded "JStats"+.ROEAJLIST[]+"$" data
//= 3.07 Finished Load_Stats script adding in the getarg(1)
//= 3.08 Added Skill/Stats Reset
//= 3.09 Added Locked Checks
//= 3.0A Removed unused variables
//= 3.0B Fixed skill/stat reseter conditions
//= 3.0C Added "rental" check to Change Job
//= 3.0D Added Zeny/Point Check to Change Job
//= 3.0E Added Item Check to Change Job
//= 3.0F Added Job Check to Job Change, no changing to current Job
//= 3.10 Added Euphy's Renter
//= 3.11 Changed Price on Euphy's Renter to work with my config
//= 3.12 Changed Setdragon; to setdragon rand(1,5); lol :)
//= 3.13 Changed Save_Stats function to use skillPointCount() instead of readparam(12)
//= 3.14 Optimized  skill/stat reseter a little better, needs work still
//= 3.15 Added Job Managment sub menus
//= 3.16 Fixed some Tabulation
//= 3.17 Added exsplanation menu for all but "Job Managment"
//= 3.18 started on rebirth menu
//= 3.19 Fixed bugs in menu variable naming
//= 3.1A Fixed bug in Cost check of Renting
//= 3.1B Added Baby Convertion
//= 3.1C Fixed bug in baby -> normal converter
//= 3.1D finished Rebirth menues
//= 3.1F Added if are rebirth check to rebirth
//= 3.20 Added Level check to rebirth
//= 3.21 Fixed a bug in stats saving incorrectly
//= 3.22 Optimized text a little
//= 3.23 Added wipe
//= 3.24 Added rental check to baby and rebirth
//= 3.25 Added platnium to Load_Stats func
//= 3.26 Added sc_end SC_ALL; to baby and rebirth
//= 3.27 fixed statspoints in rebirth scaling up
//= 3.28 Added check if have a rebirth to rebith
//= 3.29 Changed setdragon rand() to a select() for colors
//= 3.2A Public Release
//= 3.2B Fixed TK bug
//= 3.2C Fixed jobname in wipe data
//= 3.2D Fixed a bug with novice wiping its data
//= 3.2E removed a few mes notes from bug testing phase
//===== Contact Ifo: =========================================
//= [Stolao] 
//= Email: Taingram11@gmail.com
//============================================================
prontera,149,184,4	script	Job Master	123,{
	callfunc "Save_Stats";
	mes .Name$;
	mes "How can I help you today?";
	set .@M,select(.MainMenu$);
	switch(.MainList[.@M]){
		Case 1:
			set .@M,select(.JobMenu$);
			switch(.JobList[.@M]){
				case 1:	//Change Job
					mes "Which Class?";
					set .@i,1;
					while(.@i < getarraysize(.ROEAJLIST)){
						set .@j$,getd("JStats"+.ROEAJLIST[.@i]+"$");
						explode(.@s$,.@j$,"|");
						switch(.@s$[0]){
							case 8:
								if(.JobsAllow & 8){
									set .@menulist$[.@i],""+jobname(roclass(eaclass(.ROEAJLIST[.@i])|EAJL_UPPER))+" ^BF0000"+.@s$[1]+"^000000/^40FF00"+.@s$[2]+"^000000";
									set .@menuref[.@i],roclass(eaclass(.ROEAJLIST[.@i])|EAJL_UPPER);
								} else {
									set .@menulist$[.@i],"^BF0000DISABLED^000000";
									set .@menuref[.@i],-2;
								}
							Break;
							case 4:
								if(.JobsAllow & 4){
									set .@menulist$[.@i],""+jobname(roclass(eaclass(.ROEAJLIST[.@i])|EAJL_BABY))+" ^BF0000"+.@s$[1]+"^000000/^40FF00"+.@s$[2]+"^000000";
									set .@menuref[.@i],roclass(eaclass(.ROEAJLIST[.@i])|EAJL_BABY);
								} else {
									set .@menulist$[.@i],"^BF0000DISABLED^000000";
									set .@menuref[.@i],-2;
								}
							Break;
							case 1: set .@menulist$[.@i],""+jobname(.ROEAJLIST[.@i])+" ^BF0000"+.@s$[1]+"^000000/^40FF00"+.@s$[2]+"^000000"; set .@menuref[.@i],.ROEAJLIST[.@i]; Break;
							default:
							case 0: set .@menulist$[.@i],"^BF0000LOCKED^000000"; set .@menuref[.@i],-1; Break;
					}
					set .@menu$,.@menu$ + ":" + .@menulist$[.@i];
					if(.@i == 1) set .@menu$,.@menulist$[.@i];
					set .@i,.@i+1;
					}
					set @menu, select(.@menu$);		//[Note]: Think this is right, still needs testing
					if(.@menuref[@menu] == -1){ mes "Sorry that class is ^BF0000LOCKED^000000"; close; }
					if(.@menuref[@menu] == -2){ mes "Sorry that class is ^BF0000DISABLED^000000"; close; }
					if (checkfalcon() || checkcart() || checkriding() || ismounting()) { mes "Please remove your "+((checkfalcon())?"falcon":"")+((checkcart())?"cart":"")+((checkriding())?"Peco":"")+((ismounting())?"mount":"")+" before proceeding."; close;  }
					if(roclass(eaclass() & EAJ_UPPERMASK) == .ROEAJLIST[@menu]){ mes "Your already that class, no need to change"; close; }
					if((.FeeType & 1) && .LoadCost[0] > getd(.FeePoint$[0])){ mes "Sorry, You need "+.LoadCost[0]+" "+.FeePoint$[1]+"."; close; }
					if((.FeeType & 2) && .LoadCost[1] > countitem(.FeeItem)){ mes "Sorry, You don't have enough "+.LoadCost[1]+" "+getitemname(.FeeItem)+"."; close; }
					if((.FeeType & 1) && .LoadCost[0]) setd .FeePoint$[0],getd(""+.FeePoint$[0]+"")-.LoadCost[0];
					if((.FeeType & 2) && .LoadCost[1]) delitem .FeeItem,.LoadCost[1];
					callfunc "Load_Stats",getd("JStats"+.ROEAJLIST[@menu]+"$"),.@menuref[@menu];
					close;
				break;
				case 2:	//Unlock
					mes "Which Class?";
					set .@i,1;
					while(.@i < getarraysize(.ROEAJLIST)){
						set .@j$,getd("JStats"+.ROEAJLIST[.@i]+"$");
						explode(.@s$,.@j$,"|");
						switch(.@s$[0]){
							case 8:
								if(.JobsAllow & 8){
									set .@menulist$[.@i],"^BF0000UNLOCKED^000000";
									set .@menuref[.@i],-1;
								} else {
									set .@menulist$[.@i],"^BF0000DISABLED^000000";
									set .@menuref[.@i],-2;
								}
							Break;
							case 4:
								if(.JobsAllow & 4){
									set .@menulist$[.@i],"^BF0000UNLOCKED^000000";
									set .@menuref[.@i],-1;
								} else {
									set .@menulist$[.@i],"^BF0000DISABLED^000000";
									set .@menuref[.@i],-2;
								}
							Break;
							case 1: set .@menulist$[.@i],"^BF0000UNLOCKED^000000"; set .@menuref[.@i],-1; Break;
							default:
							case 0: set .@menulist$[.@i],jobname(.ROEAJLIST[.@i]); set .@menuref[.@i],.ROEAJLIST[.@i]; Break;
					}
					set .@menu$,.@menu$ + ":" + .@menulist$[.@i];
					if(.@i == 1) set .@menu$,.@menulist$[.@i];
					set .@i,.@i+1;
					}
					set @menu, select(.@menu$);
					if(.@menuref[@menu] == -1){ mes "Sorry that class is ^40FF00UNLOCKED^000000 already"; close; }
					if(.@menuref[@menu] == -2){ mes "Sorry that class is ^BF0000DISABLED^000000"; close; }
					if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
						mes "Please remove your "+((checkfalcon())?"falcon":"")+((checkcart())?"cart":"")+((checkriding())?"Peco":"")+((ismounting())?"mount":"")+" before proceeding.";
						close; 
					}
					if((.@menuref[@menu]&EAJL_2) && (roclass(eaclass(.@menuref[@menu])&EAJ_UPPERMASK)) != (roclass(eaclass()|EAJL_2_1)) && (roclass(eaclass(.@menuref[@menu])&EAJ_UPPERMASK)) != (roclass(eaclass()|EAJL_2_2)) && (.@menuref[@menu] != 4046)){
						mes "Sorry, Must be the previous class to unlock.";
						close;
					}
					if(( ( 0 < eaclass(.@menuref[@menu]) && eaclass(.@menuref[@menu]) <8 ) || ( 22 < eaclass(.@menuref[@menu]) && eaclass(.@menuref[@menu]) < 26) || ( 4046 == eaclass(.@menuref[@menu]) ) ) && (EAJ_NOVICE != eaclass())){
						next;
						mes "Sorry, Must be the previous class to unlock.";
						close;	
					}
					if(!(.@menuref[@menu]&EAJL_2)&&!(.@menuref[@menu]&EAJL_THIRD)) setarray .@z,.UnlockFirst[0],.UnlockFirst[1];
					if(.@menuref[@menu]&EAJL_2) setarray .@z,.UnlockSecond[0],.UnlockSecond[1];
					if(.@menuref[@menu]&EAJL_THIRD) setarray .@z,.UnlockThird[0],.UnlockThird[1];
					if((.FeeType & 1) && .@z[0] > getd(.FeePoint$[0])){ mes "Sorry, You need "+.@z[0]+" "+.FeePoint$[1]+"."; close; }
					if((.FeeType & 2) && .@z[1] > countitem(.FeeItem)){ mes "Sorry, You don't have enough "+.@z[1]+" "+getitemname(.FeeItem)+"."; close; }
					if((.FeeType & 1) && .@z[0]) setd .FeePoint$[0],getd(""+.FeePoint$[0]+"")-.@z[0];
					if((.FeeType & 2) && .@z[1]) delitem .FeeItem,.@z[1];
					set .@s$,"";
					set .@L,1;
					if (eaclass() & EAJL_UPPER)set .@L,8;
					if (eaclass() & EAJL_BABY)set .@L,4;
					set .@i$, .@menuref[@menu];
					set .@s$,.@s$+.@L+"|"+readparam(11)+"|"+1+"|"+skillPointCount()+"|";
					for(set .@i,13; .@i<19; set .@i,.@i+1){	set .@s$,.@s$+readparam(.@i)+"|"; }
					setd "JStats"+.@i$+"$", .@s$+StatusPoint;
					//setd "JStats"+.@menuref[@menu]+"$","1|1|1|0|1|1|1|1|1|1|48";
					callfunc "Load_Stats",getd("JStats"+.ROEAJLIST[@menu]+"$"),.@menuref[@menu];
					close;
				break;
				case 3:	//Rebirth
					set .@i, select("Rebirth:Leave");
					if (.@i==2) close;
					set .@eac, eaclass();
					set .@roc, roclass(.@eac|EAJL_UPPER);
					if (.@roc == -1) { mes "You have no Rebirth Class"; close; }
					if(.@eac&EAJL_BABY){ mes "Once your a Baby you cant becaome a Reborn sorry."; close; }
					if(.@eac&EAJL_UPPER){ mes "Once your a Rebirth you cant becaome a Reborn again, sorry."; close; }
					if(BaseLevel < .ReqRebirth[0]||JobLevel < .ReqRebirth[1]){ mes "You must be Level "+.ReqRebirth[0]+"/"+.ReqRebirth[1]+" to rebirth, sorry."; close; }
					mes "Are you sure you wish to become reborn?";
					set .@i, select("Yes:No");
					if (.@i==2) close;
					if (checkfalcon() || checkcart() || checkriding() || ismounting()) { mes "Please remove your "+((checkfalcon())?"falcon":"")+((checkcart())?"cart":"")+((checkriding())?"Peco":"")+((ismounting())?"mount":"")+" before proceeding."; close;  }
					if((.FeeType & 1) && .UnlockRebirth[0] > getd(""+.FeePoint$[0]+"")){ mes "Sorry, You need "+.UnlockRebirth[0]+" "+.FeePoint$[1]+"."; close; }
					if((.FeeType & 2) && .UnlockRebirth[1] > countitem(.FeeItem)){ mes "Sorry, You need "+.UnlockRebirth[1]+" "+getitemname(.FeeItem)+"."; close; }
					jobchange .@roc,1;
					resetlvl 3;
					sc_end SC_ALL;
					ResetSkill;
					ResetStatus;
					set SkillPoint, SkillPoint-49;
					set StatusPoint, 100;
					if((.FeeType & 1) && .UnlockRebirth[0]) setd ""+.FeePoint$[0]+"",getd(""+.FeePoint$[0]+"")-.UnlockRebirth[0];
					if((.FeeType & 2) && .UnlockRebirth[1]) delitem .FeeItem,.UnlockRebirth[1];
					close;
				break;
				case 4:	//Baby
					set .@i, select("Convert to/from Baby:Leave");
					if (.@i==2) close;
					set .@eac, eaclass();
					if(.@eac&EAJL_UPPER){ mes "Once your reborn you cant becaome a baby again im sorry."; close; }
					mes "Are you sure you wish to become a baby?";
					set .@i, select("Yes:No");
					if (.@i==2) close;
					if (checkfalcon() || checkcart() || checkriding() || ismounting()) { mes "Please remove your "+((checkfalcon())?"falcon":"")+((checkcart())?"cart":"")+((checkriding())?"Peco":"")+((ismounting())?"mount":"")+" before proceeding."; close;  }
					if((.FeeType & 1) && .UnlockBaby[0] > getd(""+.FeePoint$[0]+"")){ mes "Sorry, You need "+.UnlockBaby[0]+" "+.FeePoint$[1]+"."; close; }
					if((.FeeType & 2) && .UnlockBaby[1] > countitem(.FeeItem)){ mes "Sorry, You need "+.UnlockBaby[1]+" "+getitemname(.FeeItem)+"."; close; }
					if(.@eac&EAJL_BABY){ jobchange (.@eac&EAJ_UPPERMASK),0; 
					} else { jobchange .@eac,2; }
					if((.FeeType & 1) && .UnlockBaby[0]) setd ""+.FeePoint$[0]+"",getd(""+.FeePoint$[0]+"")-.UnlockBaby[0];
					if((.FeeType & 2) && .UnlockBaby[1]) delitem .FeeItem,.UnlockBaby[1];
					close;
				break;
				case 5:	//Wipe
					Mes "Are you sure you want to wipe your "+jobname(roclass(eaclass()))+" data? It will be like you never unlocked it";
					set .@i, select("No:Yes");
					if (.@i==1) close;
					Mes "Please type in your name";
					input .@Name$;
					if(.@Name$ != strcharinfo(0)){ next; mes .Name$; mes "Sorry, You need to type your name in correctly."; close; }
					if (checkfalcon() || checkcart() || checkriding() || ismounting()) { mes "Please remove your "+((checkfalcon())?"falcon":"")+((checkcart())?"cart":"")+((checkriding())?"Peco":"")+((ismounting())?"mount":"")+" before proceeding."; close;  }
					if((.FeeType & 1) && .WipeCost[0] > getd(""+.FeePoint$[0]+"")){ mes "Sorry, You need "+.WipeCost[0]+" "+.FeePoint$[1]+"."; close; }
					if((.FeeType & 2) && .WipeCost[1] > countitem(.FeeItem)){ mes "Sorry, You need "+.WipeCost[1]+" "+getitemname(.FeeItem)+"."; close; }
					sc_end SC_ALL;
					set .@i$, roclass(eaclass() & EAJ_UPPERMASK);
					setd "JStats"+.@i$+"$","";
					if(.@i$ == "0") set JStats0$,"1|1|1|0|1|1|1|1|1|1|42";
					if((.FeeType & 1) && .WipeCost[0]) setd ""+.FeePoint$[0]+"",getd(""+.FeePoint$[0]+"")-.WipeCost[0];
					if((.FeeType & 2) && .WipeCost[1]) delitem .FeeItem,.WipeCost[1];
					callfunc "Load_Stats",getd("JStats0$"),0;
					close;
				break;
				default:
				case 6: next; mes .Name$; mes "Come Again"; close; break;
			}
		Case 2:
			set .@i, select("Reset Stats:Reset Skills:Reset Both:Leave");
			if (.@i==4) close;
			if(.FreeReset[0] < BaseLevel || .FreeReset[1] < JobLevel){
				set .@cost[1],.StatsCost[0]+.StatsCost[1]*BaseLevel;
				set .@cost[2],.SkillCost[0]+.SkillCost[1]*BaseLevel;
				set .@cost[3],.BothCost[0]+.BothCost[1]*BaseLevel;
				set .@cost[4],.StatsCost[2]+.StatsCost[3]*BaseLevel;
				set .@cost[5],.SkillCost[2]+.SkillCost[3]*BaseLevel;
				set .@cost[6],.BothCost[2]+.BothCost[3]*BaseLevel;
				if((.FeeType & 1) && getd(""+.FeePoint$[0]+"") < .@cost[.@i]){mes "Sorry, You don't have enough "+.FeePoint$[1]+"."; close; }
				if((.FeeType & 2) && countitem(.FeeItem) < .@cost[.@i+3]){ mes "Sorry, You don't have enough "+getitemname(.FeeItem)+"."; close; }	
				if(.FeeType & 1) setd ""+.FeePoint$[0]+"",getd(""+.FeePoint$[0]+"")-.@cost[.@i];
				if(.FeeType & 2) delitem .FeeItem,.@cost[.@i+3];
			}
			if (.@i & 1) ResetStatus;
			if (.@i & 2) { sc_end SC_ALL; ResetSkill; }
			close;
		break;
		Case 3:
			set .@i, select("Rent Mount/Falcon/Cart:Leave");
			if(.@i == 2) close;
			if((.FeeType & 1) && .RentCost[0] > getd(""+.FeePoint$[0]+"")){ mes "Sorry, You need "+.RentCost[0]+" "+.FeePoint$[1]+"."; close; }
			if((.FeeType & 2) && .RentCost[1] > countitem(.FeeItem)){ mes "Sorry, You need "+.RentCost[1]+" "+getitemname(.FeeItem)+"."; close; }
			if (ismounting()) { mes "You must first remove your mount."; close; }
			else if ((eaclass()&EAJ_THIRDMASK==EAJ_RANGER) && !countitem(6124)) {
				if (!checkfalcon() && getskilllv(127) && !checkwug()) {
					if(select(" ~ Falcon: ~ Warg")==1) setfalcon;
					else getitem 6124,1; }
				else getitem 6124,1; }
			else if ((eaclass()&EAJ_THIRDMASK==EAJ_MECHANIC) && !checkcart() && getskilllv(39)) {
				if (!checkmadogear() && getskilllv(2255)) {
					if(select(" ~ Cart: ~ Mado")==1) setcart;
					else setmadogear; }
				else setcart; }
			else if (!checkcart() && getskilllv(39)) setcart;
			else if (!checkfalcon() && getskilllv(127) && !checkwug()) setfalcon;
			else if (!checkriding() && getskilllv(63)) {
				if (eaclass()&EAJ_THIRDMASK==EAJ_RUNE_KNIGHT) setdragon select("Green:Brown:Gray:Blue:Red");
				else setriding; }
			else if (!checkmadogear() && getskilllv(2255)) setmadogear;
			else { mes "You do not meet requirements to rent."; close; }
			if((.FeeType & 1) && .RentCost[0]) setd ""+.FeePoint$[0]+"",getd(""+.FeePoint$[0]+"")-.RentCost[0];
			if((.FeeType & 2) && .RentCost[1]) delitem .FeeItem,.RentCost[1];
			close;
		break;
		Case 4:
			next;
			mes "What would you like deatils on?";
			set .@M,select(.MainMenu$);
			switch(.MainList[.@M]){
				Case 1:
					set .@M,select(.JobMenu$);
					switch(.JobList[.@M]){
						case 1://Change
						break;
						case 2://Unlock
						break;
						case 3://Rebirth
						break;
						case 4://Baby
						break;
						case 5://Wipe
						break;
						Default://Close
						case 6: next; mes .Name$; mes "Come Again"; close; break;
					}
				Case 2:
					if(.FreeReset[0] <= BaseLevel || .FreeReset[1] <= JobLevel){
						set .@cost[1],.StatsCost[0]+.StatsCost[1]*BaseLevel;
						set .@cost[2],.SkillCost[0]+.SkillCost[1]*BaseLevel;
						set .@cost[3],.BothCost[0]+.BothCost[1]*BaseLevel;
						set .@cost[4],.StatsCost[2]+.StatsCost[3]*BaseLevel;
						set .@cost[5],.SkillCost[2]+.SkillCost[3]*BaseLevel;
						set .@cost[6],.BothCost[2]+.BothCost[3]*BaseLevel;
						switch(.FeeType){
							case 1:
								set .@mes$[1],""+.@cost[1]+" "+.FeePoint$[1]+" to reset stats";
								set .@mes$[2],""+.@cost[2]+" "+.FeePoint$[1]+" to reset skills";
								set .@mes$[3],""+.@cost[3]+" "+.FeePoint$[1]+" to reset both stats and skills";
							break;
							case 2:
								set .@mes$[1],""+.@cost[4]+" "+getitemname(.FeeItem)+" to reset stats";
								set .@mes$[2],""+.@cost[5]+" "+getitemname(.FeeItem)+" to reset skills";
								set .@mes$[3],""+.@cost[6]+" "+getitemname(.FeeItem)+" to reset both stats and skills";
							break;
							case 3:
								set .@mes$[1],""+((.@cost[1])?""+.@cost[1]+" "+getitemname(.FeeItem)+"":"")+((.@cost[1]&&.@cost[4])?" and ":"")+((.@cost[4])?""+.@cost[4]+" "+.FeePoint$[1]+"":"")+" to reset stats";
								set .@mes$[2],""+((.@cost[2])?""+.@cost[2]+" "+getitemname(.FeeItem)+"":"")+((.@cost[2]&&.@cost[5])?" and ":"")+((.@cost[5])?""+.@cost[5]+" "+.FeePoint$[1]+"":"")+" to reset skills";
								set .@mes$[3],""+((.@cost[3])?""+.@cost[3]+" "+getitemname(.FeeItem)+"":"")+((.@cost[3]&&.@cost[6])?" and ":"")+((.@cost[6])?""+.@cost[6]+" "+.FeePoint$[1]+"":"")+" to reset both stats and skills";
							break;
							case 0: default:
								set .@mes$[1],"Nothing to reset"; set .@mes$[2],"Nothing to reset"; set .@mes$[3],"Nothing to reset"; break;
						}
					} else {
						next;
						mes .Name$;
						mes "Reseting is the prossess of reseting skills and/or stats back to 0 so you can redistribute points";
						mes "It Cost Nothing to reset till "+((FreeReset[0])?"BaseLevel "+.FreeReset[0]+"":"")+((FreeReset[0]&&FreeReset[1])?" or ":"")+((FreeReset[1])?"JobLevel "+.FreeReset[1]+"":"")+"";
					close;
					}
					next;
					mes .Name$;
					mes "Reseting is the prossess of reseting skills and/or stats bad to 0 so you can redistribute points";
					next;
					mes .Name$;
					mes "It Cost "+.@mes$[1];
					mes "It Cost "+.@mes$[2];
					mes "It Cost "+.@mes$[3];
					close;
				break;
				Case 3:
					next;
					mes .Name$;
					mes "Renting allows you to gain a; Cart, Falcon, Mado Gear, Warg, Peco, or Dragon Depending on your class.";
					mes "Renting Cost "+((.FeeType & 2)?""+.RentCost[1]+" "+getitemname(.FeeItem)+"":"")+((.FeeType & 3)?" and ":"")+((.FeeType & 1)?""+.RentCost[0]+" "+.FeePoint$[1]+"":"")+" to rent any of these";
					close; 
				break;
				Case 4: next; mes .Name$; mes "No Stupid Questions now..."; close; break;
				Case 5:
				default: next; mes .Name$; mes "Come Again"; close; break;
			}
		break;
		Case 5:
		Default: next; mes .Name$; mes "Come Again"; close; break;
	}
end;
OnInit:
set .Name$,"[Job Master]";					//NPC name
set .JobsAllow,1|2|4|8|16;					//Enable Disable Classes in Server
								//Value is a bit field, [1] 1-1; [2] 2-1/2-2; [4] Baby; [8] Trans; [16] Third Job; [32] Custom classes.
								//	ex: 1|2|4|8 Enables All but Third, or Custom

set .JobsUnlock,1|2|8|16;					//Enable/Disable Unlocking of Classes Without Going through Job Quest
								//Value is a bit field, [1] 1-1; [2] 2-1/2-2; [4] Baby; [8] Trans; [16] Third Job; [32] Custom classes.
								//	ex: [1|2|4|8] Enables All but Third, or Custom

set .FeeType,1;							//How is Player charged to use Job Changer
								//Value is a bit field, [0] No Charge; [1] Zeny/Point; [2] Item;
								//	ex: [1|2] Player will be charged Zeny/Points for any action

set .FeeItem,609;						//Item Currency Type Used in NPC as Fee
//			[0]	[1]				//Zeny/Point Currency Type Used in NPC Fee
setarray .FeePoint$,	"Zeny",	"Zeny";				//[0]Point Variable, make sure have "" around variable name
								//	ex: "Zeny", "CASHPOINTS", "#PvpKills"
								//[1]Point Name (for mes)

								//Enable/Disable Menus is NPC
set .MenuOptions,	1|2|4|8;				//Value is a bit field, [1] Reset Stats/Skills; [2] Renting; [4] Auto Learn Platnium SKills; [8] Job Wipe;
								//	ex: 1|2|4|8 Enables All
								//Note: Job Wipe is the wiping of all the stats related to the Class your currently on then loading as a Novice

								//Cost are in array format
//			[0]	[1]				//[0] Zeny/Point Cost; [1] Item Cost
setarray .LoadCost,	2500	,0;				//Cost of Loading Saved Class
setarray .RentCost,	5000	,0;				//Cost of Renting a Mount/Falcon/Cart
setarray .UnlockFirst,	1000	,0;				//Cost of Unlocking a First Class
setarray .UnlockSecond,	10000	,0;				//Cost of Unlocking a Second Class
setarray .UnlockBaby,	100000	,0;				//Cost of Converting to a Baby
setarray .UnlockRebirth,1000000	,0;				//Cost of Rebirth
setarray .UnlockThird,	1000000	,0;				//Cost of Unlocking a Third Class
setarray .WipeCost,	0	,0;				//Wiping Job Data

								//Cost of Resets are in array format
//			[0]	[1]	[2]	[3]		//[0] Zeny/Point Cost; [1] Zeny/Point Per Level; [2] Item Cost; [3] Item Cost Per Level
setarray .StatsCost,	1000	,75	,0	,0;		//Cost of Reseting Stats (per BaseLevel)
setarray .SkillCost,	1000	,75	,0	,0;		//Cost of Reseting Skills (per JobLevel)
setarray .BothCost,	1500	,65	,0	,0;		//Cost of Reseting Both Stats and  Skills

								//Level Req are all in array format
//			[0]	[1]				//[0] BaseLevel; [1] JobLevel
setarray .FreeReset,	25	,25;				//Level which Stats/Skill Reseting are free till
setarray .ReqSuper,	45	,0;				//Super Novice Unlock
setarray .ReqSecond,	0	,50;				//Second Class Unlock
setarray .ReqRebirth,	99	,50;				//Rebirth OR Third Unlock



	set .ROEAJLIST[0],1;	//Dont Touch
	if(.JobsAllow&1){  setarray .ROEAJLIST[getarraysize(.ROEAJLIST)],0	,1	,2	,3	,4	,5	,6	,23	,24	,25	,28	,4046; }
	if(.JobsAllow&2){  setarray .ROEAJLIST[getarraysize(.ROEAJLIST)],7	,8	,9	,10	,11	,12	,14	,15	,16	,17	,18	,19	,4047	,4049; }
	if(.JobsAllow&16){ setarray .ROEAJLIST[getarraysize(.ROEAJLIST)],4054	,4055	,4056	,4057	,4058	,4059	,4066	,4067	,4068	,4069	,4070	,4071; }

	//Custom Classes
	//Format is Class ID of base job, no trans/baby types
	//	eg: [1]Swordsman doesn't need [4024]Baby Swordsman or [4002]High Swordsman
	//if(.JobsAllow&33){ setarray .ROEAJLIST[getarraysize(.ROEAJLIST)],0; }		//[33] Custom 1-1
	//if(.JobsAllow&34){ setarray .ROEAJLIST[getarraysize(.ROEAJLIST)],0; }		//[34] Custom 2-1/2-2
	//if(.JobsAllow&48){ setarray .ROEAJLIST[getarraysize(.ROEAJLIST)],0; }		//[48] Custom Third Job

	set .MainList[0],1;						//[Note]: Is it better to do this in the init or every time a character invokes npc, or make a func?
	set .MainMenu$,"Job Managemnet";
	set .MainList[getarraysize(.MainList)],1;
	if(.MenuOptions&1){ set .MainMenu$,.MainMenu$ +":Reset"; set .MainList[getarraysize(.MainList)],2; }
	if(.MenuOptions&2){ set .MainMenu$,.MainMenu$ +":Rentals"; set .MainList[getarraysize(.MainList)],3; }
	set  .MainMenu$,.MainMenu$ +":Explanation:Leave";
	setarray .MainList[getarraysize(.MainList)],4,5;

	set .JobList[0],1;
	set .JobMenu$,"Change Job";
	set .JobList[getarraysize(.JobList)],"1";
	if(.JobsUnlock){ set .JobMenu$,.JobMenu$ +":Unlock Jobs"; set .JobList[getarraysize(.JobList)],"2"; }
	if(.JobsAllow&8){ set .JobMenu$,.JobMenu$ +":Rebirth"; set .JobList[getarraysize(.JobList)],"3"; }
	if(.JobsAllow&4){ set .JobMenu$,.JobMenu$ +":Conver to/from Baby"; set .JobList[getarraysize(.JobList)],"4"; }
	if(.MenuOptions&8){ set .JobMenu$,.JobMenu$ +":Wipe Job Data"; set .JobList[getarraysize(.JobList)],"5"; }
	set  .JobMenu$,.JobMenu$ +":Leave";
	set .JobList[getarraysize(.JobList)],"6";
end;
OnPCBaseLvUpEvent:
OnPCJobLvUpEvent:
	callfunc "Save_Stats";
end;
}

function	script	Load_Stats	{
	sc_end SC_ALL;
	set .@s$,"";
	jobchange getarg(1);
		explode(.@s$,getarg(0),"|");
		set BaseLevel, atoi(.@s$[1]);
		set JobLevel, atoi(.@s$[2]);
		ResetStatus;
		ResetSkill;
		for(set .@i,4; .@i<10; set .@i,.@i+1){
			sleep2 50;
			statusup2 (.@i+9), atoi(.@s$[.@i])-1;
		}
		set StatusPoint, atoi(.@s$[10]);
		set SkillPoint, atoi(.@s$[3]);
		if(getvariableofnpc(.MenuOptions,"Job Master")&4){
		skill 142,1,0;
			switch(BaseClass) {
			case 0: if (Class !=23) skill 143,1,0; break;
			case 1: skill 144,1,0; skill 145,1,0; skill 146,1,0; break;
			case 2: skill 157,1,0; break;
			case 3: skill 147,1,0; skill 148,1,0; break;
			case 4: skill 156,1,0; break;
			case 5: skill 153,1,0; skill 154,1,0; skill 155,1,0; break;
			case 6: skill 149,1,0; skill 150,1,0; skill 151,1,0; skill 152,1,0; break;
			default: break; }
			switch(roclass(eaclass()&EAJ_UPPERMASK)) {
			case 7: skill 1001,1,0; break;
			case 8: skill 1014,1,0; break;
			case 9: skill 1006,1,0; break;
			case 10: skill 1012,1,0; skill 1013,1,0; break;
			case 11: skill 1009,1,0; break;
			case 12: skill 1003,1,0; skill 1004,1,0; break;
			case 14: skill 1002,1,0; break;
			case 15: skill 1015,1,0; skill 1016,1,0; break;
			case 16: skill 1007,1,0; skill 1008,1,0; skill 1017,1,0; skill 1018,1,0; skill 1019,1,0; break;
			case 17: skill 1005,1,0; break;
			case 18: skill 238,1,0; break;
			case 19: skill 1010,1,0; break;
			case 20: skill 1011,1,0; break;
			default: break; }
		}
	return;
}

function	script	Save_Stats	{			//[Note]: I made this a seperate function so I can call elsewhere if needed
		set .@s$,"";
		set .@L,1;
		if (eaclass() & EAJL_UPPER)set .@L,8;
		if (eaclass() & EAJL_BABY)set .@L,4;
		set .@i$, roclass(eaclass() & EAJ_UPPERMASK);	
		set .@s$,.@s$+.@L+"|"+readparam(11)+"|"+readparam(55)+"|"+skillPointCount()+"|";
		for(set .@i,13; .@i<19; set .@i,.@i+1)
			set .@s$,.@s$+readparam(.@i)+"|";
		setd "JStats"+.@i$+"$", .@s$+StatusPoint;
		//[Note]: End result should look like following
		//[Note]: JStats(job)$, Lock | Blv | Jlv | SkillPoints | Str | Agi | Vit | Int | Dex | Luk | StatusPoint;
		//Option 2 can be Class:Baby:Trans
		//JStats(job)$,Lock|Blv|Jlv|SkillPoints|Str|Agi|Vit|Int|Dex|Luk|StatusPoint:Blv|Jlv|SkillPoints|Str|Agi|Vit|Int|Dex|Luk|StatusPoint:Blv|Jlv|SkillPoints|Str|Agi|Vit|Int|Dex|Luk|StatusPoint;
return;
}



function	script	CalcTotalLv	{
	set .@Classes[0],1;	set .@TL,0;	//Dont Touch
if(.@JobAllow&1){
	setarray .@Classes,0,1,2,3,4,5,6,23,24,25,28,4046;
	set .@TL,.@TL+1440;	set .@TL,.@TL+669;
}
if(.@JobAllow&2){
	setarray .@Classes[getarraysize(.@Classes)],7,8,9,10,11,12,14,15,16,17,18,19,4047,4049;
	set .@TL,.@TL+1680;	set .@TL,.@TL+940;
}
if(.@JobAllow&16){
	setarray .@Classes[getarraysize(.@Classes)],4054,4055,4056,4057,4058,4059,4066,4067,4068,4069,4070,4071;
	set .@TL,.@TL+1440;	set .@TL,.@TL+840;
}
	set .@i,1;
	while(.@i < getarraysize(.@Classes)){
		set .@s$,"";
		explode(.@s$,.Classes[.@i],"|");
		set .@Count, .@Count + atoi(.@s$[1]) + atoi(.@s$[2]);
		sleep2 243;
		set .@i,.@i+1;
	}
	dispbottom "You at "+(.@Count*10000/.@TL)/100+"."+(.@Count*10000/.@TL)%100+"% Compleate. Keep it up~";
	return;
}









