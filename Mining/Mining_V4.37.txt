//===== EinherjarRO Scripts ================================== 
//= Mining System 
//===== By: ================================================== 
//= Stolao
//===== Current Version: ===================================== 
//= 4.37
//===== Compatible With: ===================================== 
//= rAthena SVN
//===== Description: ========================================= 
//= Mining System 
//===== Comments: ============================================
//= [Stolao]
//= Needs More Mining Spots
//= Add Prision Mine
//===== Additional Comments: =================================
//= 1.-- Origional Design Scapped, very bad design
//= 2.-- 2nd Make Worked but didn't like it Scrapped
//= 3.-- 3rd Make Worked perfectly, but scapped for a less random style
//= 4.00 Revamp yet again, made monster based onkillscripts with follow up callfunc
//= 4.01 Added prontera/jellopy test mine
//= 4.02 Removed Test Mines
//= 4.03 Converted script froma  callfunc -> function
//= 4.04 Added 5 New Jellopy Mines
//= 4.05 Generated Coal Mine Function
//= 4.06 Added 5 Coal Mines
//= 4.07 Seperated Setup into Tiers
//= 4.08 Fixed unneeded dispbottom when max level mining
//= 4.09 Shortened Coal callfunc, same rates overall
//= 4.0A Made Mob Ids Configurable
//= 4.0B Swapped Pick Break and Pick Damage logic order
//= 4.0C Addeda shortended version of 'MiningSpawn' using getd/setd (needs testing)
//= 4.0D Removed Unessisarry code from 'MiningSpawn'
//= 4.0E Changed non-pick Removal rate from 20% -> 25%
//= 4.0F Changed non-pick Break rate from 20% -> 5% (actually from 4% -> 1.25%)
//= 4.10 Added Crytal MiningFunc
//= 4.11 Added Ori MiningFunc
//= 4.12 Added Elu MiningFunc
//= 4.13 Added Master MiningFunc
//= 4.14 Added HD Ori and Elu to respective spawns and Master
//= 4.15 Changed HD Ori/Elu from 10 -> 50 In Master Deposits
//= 4.16 Changed Exp for Tier 5 from 600,1000 -> 600,2500
//= 4.17 Changed Exp for Tier 6 from 0 -> 10000
//= 4.18 Changed OnMineJellopy -> OnMineJell
//= 4.19 Added More Jellopy, Iron, Fire and Ice Locations
//= 4.1A Changed Initial Spawn Amounts from 255 -> 399 total
//= 4.1B Added More Locations for All
//= 4.1C Removed Some Notes
//= 4.1D Added Variant Crystals To Script (neutral/ghost)
//= 4.1E Changed Default Spawn from tier 0 -> rand(0,6)
//= 4.1F Added 101 'Default' Spawns increaseing total from 399 -> 500
//= 4.20 Fixed Typo in 'MiningSpawn'
//= 4.21 Added 'Extras' Into Notes
//= 4.22 Fixed Bug with Variable naming changed '-' -> '_'
//= 4.23 Fixed Various Typos and Bugs
//= 4.24 Added Mining Level now Increase item rate by .01% per level up to 1%
//= 4.25 Increased Rates of most Deposits
//= 4.26 Changed Mining Level now Increase item rate by (0.01 * MLV * Try / 7)% up to 2.71%
//= 4.27 Added [Mining]: to script messages
//= 4.28 Changed Exp for Tier 6 from 10000 -> 7500
//= 4.29 Changed Req Level for Tier 6 from 70 -> 90
//= 4.2A Fixed a bug where Tiers 5 and 6 where spawning 403 Crystals on Death
//= 4.2B Removed Old 'MiningSpawn' Obsolete Code
//= 4.2C Changed Tier 6 Break Rate from 0.01% -> 0.09%
//= 4.2D Changed Tier 6 Damage Rate from 0.3% -> 2.5%
//= 4.2E Changed Break Code from rand(10000)/(.@T-(.Pick[0] -1)) -> rand(2500)*(.@T-(.Pick[0] -1))
//= 4.2F Changed Damage Code from rand(10000)/(.@T-(.Pick[0] -1)) -> rand(2500)*(.@T-(.Pick[0] -1))
//= 4.30 Added More Locations
//= 4.31 Added Crafting Recipies to Notes
//= 4.32 Increased All Break and Damage Rates
//= 4.33 Added Emveretarcon, Iron Ore, and Iron to a Few More Deposits
//= 4.34 Added More Jellopy Locations
//= 4.35 Added More Coal Locations
//= 4.36 Added More Iron Locations
//= 4.37 Changed Delete Item != Pickaxe code to use Failed Refine (needs testing)
//= 4.38 Added a Test Mine for new Break Rates
//===== Extras: ==============================================
//= db/import/mob_avail.txt
//= Mining Crystals
//= 3501,1907
//= 3502,1907
//= 3503,1907
//= 3504,1907
//= 3505,1907
//= 3506,1907
//= 3507,1907
//= 3508,1907
//= 3509,1907
//= 3510,1907
//= 3511,1907
//= 3512,1907
//= 3513,1907
//= 3514,1907
//= 
//= db/import/mob_db.txt
//= Mining Crystals
//= 3501,Crystal01, Crystal, Crystal,01,20,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3502,Crystal01_,Crystal, Crystal,01,20,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3503,Crystal05, Crystal, Crystal,05,25,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3504,Crystal05_,Crystal, Crystal,05,25,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3505,Crystal10_,Crystal, Crystal,10,30,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3506,Crystal10, Crystal, Crystal,10,30,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3507,Crystal25, Crystal, Crystal,25,35,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3508,Crystal25_,Crystal, Crystal,25,35,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3509,Crystal50_,Crystal, Crystal,50,40,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3510,Crystal50, Crystal, Crystal,50,40,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3511,Crystal70, Crystal, Crystal,70,45,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3512,Crystal70_,Crystal, Crystal,70,45,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3513,Crystal99_,Crystal, Crystal,99,50,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,48,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 3514,Crystal99, Crystal, Crystal,99,50,1,0,0,0,0,0,50,99,0,55,55,99,0,55,0,0,1,0,40,0x0140,800,999,999,999,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//= 
//= db/import/item_db.txt
//= Mining Pickaxe
//= 47001,Iron_Pick,Iron Pick,5,5000,,250,25,,,0,0xffffffff,7,2,2,1,10,,,{},{},{}
//= 47002,Steel_Pick,Steel Pick,5,10000,,350,35,,,0,0xffffffff,7,2,2,1,25,,,{},{},{}
//= 47003,Emveretarcon_Pick,Emveretarcon Pick,5,100000,,500,50,,,0,0xffffffff,7,2,2,2,50,,,{},{},{}
//= 47004,Oridecon_Pick,Oridecon Pick,5,500000,,650,65,,,0,0xffffffff,7,2,2,3,75,,,{},{},{}
//= 47005,Emperium_Pick,Emperium Pick,5,1000000,,800,80,,,0,0xffffffff,7,2,2,4,90,,,{},{},{}
//=
//=db/import/produce_db.txt
//= 264,47001,1,101,1,7201,2,998,3
//= 265,47002,2,101,2,7201,2,604,1,999,3
//= 266,47003,3,101,3,7201,2,604,2,984,3
//= 267,47004,3,101,3,7201,2,604,4,714,1
//===== Contact Ifo: =========================================
//= [Stolao] 
//= Email: Taingram11@gmail.com
//============================================================
//calfunc "MiningFunc",<MinBaseLevel>,<MinMineLvl>,<Min Pick>,<Break Chance>,<Damage Chance>,<Exp>,<ItemID1>,<Get Chance1>{,<ItemID2>,<Get Chance2>.....,<ItemID10>,<Get Chance10>};
// 0 - MinBaseLevel
//	Minimal Base Level to collect items from this mine
// 1 - MinMineLvl
//	Minimal Mining Level to collect items from this mine
// 2 - Min Pick
//	Minimal Pick required to mine
// 3 - Break Chance
//	Chance of breaking your pickaxe permently
// 4 - Damage Chance
//	Chance of damaging your pickaxe, just need to repair
// 5 - Exp
//	Amount of Mining Exp earned
// 6 - ItemID1 - 10
//	Item Id
// 7 - Get Chance1 - 10
//	Chance of Collecting / 10000
//
//
//calfunc "MiningSpawn"<Amount>,<Tier>{,<Location>};
// 0 - Amount
//	Amount of Deposits to spawn, Default 1
// 1 - Tier
//	The Spawn Group defined in Oninit:
// 2 - Location
//	Optional Variable used to pick an exact location value in the arrays
//	Should be smaller then getarraysize() of Tier used


-	script	Mining	-1,{
function MiningSpawn;	function MiningFunc;
OnMineJell:
	MiningSpawn(1,0);
	MiningFunc(0,0,.Pick[0],5,100,rand(1,2),7049,5000,909,2500,909,1250,909,625,909,625,909,625,909,625,909,625,909,625,7126,625);
end;
OnMineCoal:
	MiningSpawn(1,1);
	MiningFunc(5,5,.Pick[0],6,110,rand(5,10),909,1000,7049,2500,1003,1000,7049,1000,1003,5750,984,500);
end;
OnMineIron:
	MiningSpawn(1,2);
	MiningFunc(10,10,.Pick[0],7,1200,rand(25,70),7049,1000,1002,1000,7049,1000,1002,1000,7049,1000,1002,2000,984,1500,1002,4500,1002,2500,998,5000);
end;
OnMineFire:
	MiningSpawn(1,3);
	MiningFunc(25,25,.Pick[1],8,130,rand(100,200),7049,3000,7096,1000,7097,1000,7098,1000,7521,1000,1003,1000,990,3000,1002,1000,990,3000,994,2500);
end;
OnMineIce:
	MiningSpawn(1,3);
	MiningFunc(25,25,.Pick[1],8,130,rand(100,200),7049,3000,7066,1000,7066,1000,7561,1000,7522,1000,1003,1000,991,3000,1002,1000,991,3000,995,2500);
end;
OnMineWind:
	MiningSpawn(1,3);
	MiningFunc(25,25,.Pick[1],8,130,rand(100,200),7049,3000,7189,1000,7189,1000,7189,1000,7523,1000,1003,1000,992,3000,1002,1000,992,3000,996,2500);
end;
OnMineEarth:
	MiningSpawn(1,3);
	MiningFunc(25,25,.Pick[1],8,130,rand(100,200),7049,3000,953,1000,953,1000,1002,1000,953,1000,1003,1000,993,3000,7049,1000,993,3000,997,2500);
end;
OnMineGold:
	MiningSpawn(1,4);
	MiningFunc(50,50,.Pick[2],9,140,rand(300,500),7049,2000,969,1000,1002,3000,969,1500,984,1500,998,1500,1002,2000,969,3000,1002,2000,969,4000);
end;
OnMineGems:
	MiningSpawn(1,4);
	switch(rand(0,1)){
		case 0: MiningFunc(50,50,.Pick[2],9,140,rand(300,500),909,3000,718,1750,719,1750,720,1750,721,1750,722,1750,723,1750,715,1500,716,1500,717,1500);	break;
		case 1: MiningFunc(50,50,.Pick[2],9,140,rand(300,500),909,3000,724,1750,725,1750,726,1750,727,1750,728,1750,729,1750,715,1500,716,1500,717,1500);	break;
	}
end;
OnMineCryst:
	MiningSpawn(1,5);
	MiningFunc(70,70,.Pick[3],10,180,rand(600,2500),7049,1000,rand(7445,7448),2500,7563,1000,7511,1500,733,500,7799,1000,7315,1500,rand(730,731),2500,rand(730,733),700,714,2000);
end;
OnMineOri:
	MiningSpawn(1,5);
	MiningFunc(70,70,.Pick[3],10,180,rand(600,2500),7049,1000,909,1000,998,1500,994,1500,756,4500,984,3500,6240,10);
end;
OnMineElu:
	MiningSpawn(1,5);
	MiningFunc(70,70,.Pick[3],10,180,rand(600,2500),7049,1000,909,1000,998,1500,994,1500,757,4500,985,3500,7619,10);
end;
OnMineMaster:
	MiningSpawn(1,6);
	MiningFunc(90,90,.Pick[3],15,250,7500,1002,1000,7619,50,6240,50,984,3500,985,3500,969,2500,7444,2500);
end;
OnMineTest:
	MiningSpawn(1,0,getarraysize(.Tier0_N$));
	MiningFunc(1,1,.Pick[1],100,500,20,909,9000);
end;
OnInit:
	function MiningSpawn;	function MiningFunc;
	set .MinelvlMax,100;
	set .expcurve,25;
	setarray .Pick, 47001,47002,47003,47004,47005;
	setarray .MobIds,3501,3502;
																														
	setarray .Tier0_N$[0],		"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy";
	setarray .Tier0_T$[0],		"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell";
	setarray .Tier0_M$[0],		"prt_fild08"	,"prt_fild08"	,"einbech"	,"pay_dun00"	,"prt_fild06"	,"orcsdun02"	,"thor_v02"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"gef_fild10"	,"prt_fild08"	,"prt_fild05"	,"prt_fild06";
	setarray .Tier0_X1[0],		181		,41		,132		,147		,97		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier0_X2[0],		209		,57		,122		,156		,102		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier0_Y1[0],		303		,46		,231		,173		,152		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier0_Y2[0],		283		,61		,253		,172		,136		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier0_N$);
	setarray .Tier0_N$[.@g],	"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy";
	setarray .Tier0_T$[.@g],	"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell";
	setarray .Tier0_M$[.@g],	"anthell01"	,"anthell02"	,"ice_dun01"	,"ice_dun02"	,"ice_dun03"	,"beach_dun"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"iz_dun01"	,"man_fild01"	,"man_fild02"	,"man_fild03";
	setarray .Tier0_X1[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier0_X2[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier0_Y1[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier0_Y2[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier0_N$);
	setarray .Tier0_N$[.@g],	"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Jellopy"	,"Test";
	setarray .Tier0_T$[.@g],	"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineJell"	,"OnMineTest";
	setarray .Tier0_M$[.@g],	"anthell01"	,"anthell02"	,"gefenia02"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"gef_fild10"	,"gef_fild08"	,"pay_dun02"	,"hu_fild03"	,"lou_fild01"	,"prontera";
	setarray .Tier0_X1[.@g],	-1		,-1		,124		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,138;
	setarray .Tier0_X2[.@g],	-1		,-1		,110		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,138;
	setarray .Tier0_Y1[.@g],	-1		,-1		,120		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,184;
	setarray .Tier0_Y2[.@g],	-1		,-1		,111		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,184;

	setarray .Tier1_N$[0],		"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal";
	setarray .Tier1_T$[0],		"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal";
	setarray .Tier1_M$[0],		"mjo_dun01"	,"mjo_dun01"	,"mjo_dun03"	,"ein_dun01"	,"einbech"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"ein_fild05"	,"ein_fild08"	,"abyss_03"	,"thor_v02;
	setarray .Tier1_X1[0],		39		,143		,20		,181		,132		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier1_X2[0],		35		,135		,300		,50		,122		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier1_Y1[0],		174		,143		,20		,214		,231		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier1_Y2[0],		135		,300		,68		,135		,253		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier1_N$);
	setarray .Tier1_N$[.@g],	"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal"		,"Coal";
	setarray .Tier1_T$[.@g],	"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal"	,"OnMineCoal";
	setarray .Tier1_M$[.@g],	"anthell01"	,"anthell02"	,"mag_dun01"	,"mag_dun02"	,"thor_v01"	,"thor_v02"	,"thor_v03"	,"ve_fild03"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03";
	setarray .Tier1_X1[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,88		,-1		,-1		,-1;
	setarray .Tier1_X2[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,308		,-1		,-1		,-1;
	setarray .Tier1_Y1[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,176		,-1		,-1		,-1;
	setarray .Tier1_Y2[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,267		,-1		,-1		,-1;

	setarray .Tier2_N$[0],		"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron";
	setarray .Tier2_T$[0],		"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron";
	setarray .Tier2_M$[0],		"mjo_dun01"	,"mjo_dun03"	,"ein_dun01"	,"ein_dun01"	,"hu_fild05"	,"orcsdun01"	,"orcsdun02"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"ein_fild08"	,abyss_03"	,"thor_v02;
	setarray .Tier2_X1[0],		143		,-1		,137		,181		,101		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier2_X2[0],		135		,-1		,122		,50		,110		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier2_Y1[0],		143		,-1		,264		,214		,109		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier2_Y2[0],		135		,-1		,252		,68		,119		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier2_N$);
	setarray .Tier2_N$[.@g],	"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron"		,"Iron";
	setarray .Tier2_T$[.@g],	"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron"	,"OnMineIron";
	setarray .Tier2_M$[.@g],	"hu_fild05"	,"anthell01"	,"anthell02"	,"orcsdun02"	,"beach_dun"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"ve_fild01"	,"ve_fild02"	,"ve_fild03"	,"ve_fild07";
	setarray .Tier2_X1[.@g],	101		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier2_X2[.@g],	110		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier2_Y1[.@g],	109		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier2_Y2[.@g],	119		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;

	setarray .Tier3_N$[0],		"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire"		,"Fire";
	setarray .Tier3_T$[0],		"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire"	,"OnMineFire";
	setarray .Tier3_M$[0],		"anthell01"	,"anthell02"	,"mag_dun01"	,"mag_dun02"	,"thor_v01"	,"thor_v02"	,"thor_v03"	,"ve_fild03"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03";
	setarray .Tier3_X1[0],		-1		,-1		,-1		,-1		,-1		,-1		,-1		,88		,-1		,-1		,-1;
	setarray .Tier3_X2[0],		-1		,-1		,-1		,-1		,-1		,-1		,-1		,308		,-1		,-1		,-1;
	setarray .Tier3_Y1[0],		-1		,-1		,-1		,-1		,-1		,-1		,-1		,176		,-1		,-1		,-1;
	setarray .Tier3_Y2[0],		-1		,-1		,-1		,-1		,-1		,-1		,-1		,267		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier3_N$);
	setarray .Tier3_N$[.@g],	"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice"		,"Ice";
	setarray .Tier3_T$[.@g],	"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce"	,"OnMineIce";
	setarray .Tier3_M$[.@g],	"anthell01"	,"anthell02"	,"ice_dun01"	,"ice_dun02"	,"ice_dun03"	,"beach_dun"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"iz_dun01"	,"man_fild01"	,"man_fild02"	,"man_fild03";
	setarray .Tier3_X1[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_X2[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_Y1[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_Y2[.@g],	-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier3_N$);
	setarray .Tier3_N$[.@g],	"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind"		,"Wind";
	setarray .Tier3_T$[.@g],	"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind"	,"OnMineWind";
	setarray .Tier3_M$[.@g],	"anthell01"	,"anthell02"	,"gefenia02"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"gef_fild10"	,"gef_fild08"	,"pay_dun02"	,"hu_fild03"	,"lou_fild01";
	setarray .Tier3_X1[.@g],	-1		,-1		,124		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_X2[.@g],	-1		,-1		,110		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_Y1[.@g],	-1		,-1		,120		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_Y2[.@g],	-1		,-1		,111		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier3_N$);
	setarray .Tier3_N$[.@g],	"Earth"		,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth"	,"Earth";
	setarray .Tier3_T$[.@g],	"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth"	,"OnMineEarth";
	setarray .Tier3_M$[.@g],	"hu_fild05"	,"anthell01"	,"anthell02"	,"orcsdun02"	,"beach_dun"	,"prt_maze01"	,"prt_maze02"	,"prt_maze03"	,"ve_fild01"	,"ve_fild02"	,"ve_fild03"	,"ve_fild07";
	setarray .Tier3_X1[.@g],	101		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_X2[.@g],	110		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_Y1[.@g],	109		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;
	setarray .Tier3_Y2[.@g],	119		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1		,-1;

	setarray .Tier4_N$[0],		"Gold"		,"Gold"		,"Gold"		,"Gold"		,"Gold"		,"Gold";
	setarray .Tier4_T$[0],		"OnMineGold"	,"OnMineGold"	,"OnMineGold"	,"OnMineGold"	,"OnMineGold"	,"OnMineGold";
	setarray .Tier4_M$[0],		"abyss_01"	,"abyss_02"	,"abyss_03"	,"prt_maze02"	,"ein_fild08"	,"lou_fild01";
	setarray .Tier4_X1[0],		206		,176		,40		,11		,-1		,-1;
	setarray .Tier4_X2[0],		270		,158		,148		,22		,-1		,-1;
	setarray .Tier4_Y1[0],		34		,217		,54		,188		,-1		,-1;
	setarray .Tier4_Y2[0],		91		,207		,162		,169		,-1		,-1;
	set .@g,getarraysize(.Tier4_N$);
	setarray .Tier4_N$[.@g],	"Gem"		,"Gem"		,"Gem"		,"Gem"		,"Gem"		,"Gem";
	setarray .Tier4_T$[.@g],	"OnMineGems"	,"OnMineGems"	,"OnMineGems"	,"OnMineGems"	,"OnMineGems"	,"OnMineGems";
	setarray .Tier4_M$[.@g],	"abyss_02"	,"abyss_03"	,"prt_maze02"	,"iz_dun01"	,"ein_fild08"	,"mjolnir_09";
	setarray .Tier4_X1[.@g],	33		,40		,11		,-1		,-1		,-1;
	setarray .Tier4_X2[.@g],	26		,148		,22		,-1		,-1		,-1;
	setarray .Tier4_Y1[.@g],	225		,54		,188		,-1		,-1		,-1;
	setarray .Tier4_Y2[.@g],	220		,162		,169		,-1		,-1		,-1;

	setarray .Tier5_N$[0],		"Crystal"	,"Crystal"	,"Crystal"	,"Crystal"	,"Crystal";
	setarray .Tier5_T$[0],		"OnMineCryst"	,"OnMineCryst"	,"OnMineCryst"	,"OnMineCryst"	,"OnMineCryst";
	setarray .Tier5_M$[0],		"abyss_03"	,"prt_maze02"	,"dic_fild01"	,"ein_fild05"	,"man_fild01";
	setarray .Tier5_X1[0],		40		,11		,-1		,-1		,-1;
	setarray .Tier5_X2[0],		148		,22		,-1		,-1		,-1;
	setarray .Tier5_Y1[0],		54		,188		,-1		,-1		,-1;
	setarray .Tier5_Y2[0],		162		,169		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier5_N$);
	setarray .Tier5_N$[.@g],	"Oridecon"	,"Oridecon"	,"Oridecon"	,"Oridecon"	,"Oridecon";
	setarray .Tier5_T$[.@g],	"OnMineOri"	,"OnMineOri"	,"OnMineOri"	,"OnMineOri"	,"OnMineOri";
	setarray .Tier5_M$[.@g],	"abyss_03"	,"prt_maze02"	,"pay_dun02"	,"ein_fild05"	,"ein_fild08";
	setarray .Tier5_X1[.@g],	40		,11		,-1		,-1		,-1;
	setarray .Tier5_X2[.@g],	148		,22		,-1		,-1		,-1;
	setarray .Tier5_Y1[.@g],	54		,188		,-1		,-1		,-1;
	setarray .Tier5_Y2[.@g],	162		,169		,-1		,-1		,-1;
	set .@g,getarraysize(.Tier5_N$);
	setarray .Tier5_N$[.@g],	"Elunium"	,"Elunium"	,"Elunium"	,"Elunium"	,"Elunium";
	setarray .Tier5_T$[.@g],	"OnMineElu"	,"OnMineElu"	,"OnMineElu"	,"OnMineElu"	,"OnMineElu";
	setarray .Tier5_M$[.@g],	"abyss_03"	,"prt_maze02"	,"ein_fild05"	,"ein_fild08"	,"man_fild01";
	setarray .Tier5_X1[.@g],	40		,11		,-1		,-1		,-1;
	setarray .Tier5_X2[.@g],	148		,22		,-1		,-1		,-1;
	setarray .Tier5_Y1[.@g],	54		,188		,-1		,-1		,-1;
	setarray .Tier5_Y2[.@g],	162		,169		,-1		,-1		,-1;

	setarray .Tier6_N$[0],		"Master"	,"Master"	,"Master"	,"Master"	,"Master";
	setarray .Tier6_T$[0],		"OnMineMaster"	,"OnMineMaster"	,"OnMineMaster"	,"OnMineMaster"	,"OnMineMaster";
	setarray .Tier6_M$[0],		"abyss_03"	,"prt_maze02"	,"hu_fild05"	,"man_fild01"	,"mjolnir_09";
	setarray .Tier6_X1[0],		40		,11		,-1		,-1		,-1;
	setarray .Tier6_X2[0],		148		,22		,-1		,-1		,-1;
	setarray .Tier6_Y1[0],		54		,188		,-1		,-1		,-1;
	setarray .Tier6_Y2[0],		162		,169		,-1		,-1		,-1;

	// Initial Spawn
	MiningSpawn(99,0);
	MiningSpawn(83,1);
	MiningSpawn(67,2);
	MiningSpawn(53,3);
	MiningSpawn(39,4);
	MiningSpawn(23,5);
	MiningSpawn(7,6);
	MiningSpawn(1,0,getarraysize(.Tier0_N$));
end;
	function MiningSpawn {
	// MiningSpawn(<Amount>,<Tier>{,<Location>})
		for(set .@i,getarg(0,1); .@i > 0; set .@i,.@i-1){
			set .@lv,getarg(1,rand(0,6));
			set .@s,getarg(2,rand(getarraysize(getd(".Tier"+ .@lv +"_M$"))));
			if(getd(".Tier"+.@lv+"_X1["+.@s+"]") < 0 || getd(".Tier"+.@lv+"_X2["+.@s+"]") < 0 || getd(".Tier"+.@lv+"_Y1["+.@s+"]") < 0 || getd(".Tier"+.@lv+"_Y2["+.@s+"]") < 0){
				monster getd(".Tier"+.@lv+"_M$["+.@s+"]"),0,0,getd(".Tier"+.@lv+"_N$["+.@s+"]")+" Deposit",rand(.MobIds[0],.MobIds[1]) + 2*.@lv,1,"Mining::"+(getd(".Tier"+.@lv+"_T$["+.@s+"]"))+"";
			} else {
				areamonster getd(".Tier"+.@lv+"_M$["+.@s+"]"),getd(".Tier"+.@lv+"_X1["+.@s+"]"),getd(".Tier"+.@lv+"_Y1["+.@s+"]"),getd(".Tier"+.@lv+"_X2["+.@s+"]"),getd(".Tier"+.@lv+"_Y2["+.@s+"]"),getd(".Tier"+.@lv+"_N$["+.@s+"]")+" Deposit",rand(.MobIds[0],.MobIds[1]) + 2*.@lv,1,"Mining::"+(getd(".Tier"+.@lv+"_T$["+.@s+"]"))+"";
			}
		}
	return;
	}
	function MiningFunc {
	//calfunc "MiningFunc",<MinBaseLevel>,<MinMineLvl>,<Min Pick>,<Break Chance>,<Damage Chance>,<Exp>,<ItemID1>,<Get Chance1>{,<ItemID2>,<Get Chance2>.....,<ItemID10>,<Get Chance10>};
		set .@T, getequipid(EQI_HAND_R);
		if(.@T < 1){
			message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your hand looks as though it could break...";
			percentheal -15,-15;	heal -5,0;	end;
		}
		if( .@T < .Pick[0] || .@T > .Pick[4] ){
			if(rand(4)){
				message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" looks as though it could break...";
			} else {
			// New Code Test and See
				if(rand(20)){
					unequip EQI_HAND_R;
					message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" was knocked out of your hand.";
				} else {
					message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" has broken.";
					failedrefitem EQI_HAND_R;
				}
/*			// Old Code, Delete Later after testing
				unequip EQI_HAND_R;
				if(rand(20)){
					message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" was knocked out of your hand.";
				} else {
					message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" has broken.";
					delitem .@T,1;
				}
*/
			}
			percentheal -5,-5;
			heal -5,0;
			end;
		} else if(getarg(0,0) > BaseLevel){
			message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your body is too weak to harvest this.";
			percentheal -3,-3;	heal -5,0;	end;
		} else if(getarg(1,0) > MineMaster){
			message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your not skilled enough to harvest this effectivly.";
			percentheal -3,-3;	heal -5,0;	end;
		} else if(getarg(2,.Pick[0]) > .@T){
			message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your pickaxe is not advanced enough to harvest this.";
			end;
		} else if(getarg(4,50) > rand(2500)*(.@T-(.Pick[0] -1)) && .@T != .Pick[4]){
			unequip EQI_HAND_R;
			message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" was damaged.";
			delitem .@T,1;
			getitem2 .@T,1,1,0,1,0,0,0,0;
			end;
		} else if(getarg(3,5) > rand(2500)*(.@T-(.Pick[0] -1)) && .@T != .Pick[4]){
			unequip EQI_HAND_R;
			message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" your "+getitemname(.@T)+" has broken.";
			delitem .@T,1;
			end;
		} else {
			
			for(set .@i,6; .@i < getargcount() - 6 && !.@C; set .@i, .@i + 2 ){
				if(getarg(.@i + 1,0) + MineMaster * (.@i - 5) / 7 > rand(10000)){
					getitem getarg(.@i,7049),1;
					set .@C,1;
				}
			}
			if(!.@C){
				message strcharinfo(0),"[Mining]: "+strcharinfo(0)+" you failed to harvest anything.";
				end;
			} else if(MineMaster != .MinelvlMax){
				set .@expneed,MineMaster*(MineMaster*.expcurve)+10+MineMaster;
				set MineExp,MineExp+getarg(5,1);
				if(MineExp > .@expneed && MineMaster < .MinelvlMax){
					set MineMaster,MineMaster+1;
					set MineExp,0;
					announce "[Mining]: Level has advanced to Lv "+MineMaster+"!",bc_blue|bc_self;
					specialeffect2 371;
				} else {
					message strcharinfo(0),"[Mining]: "+getarg(5,1)+" Exp Gained "+MineExp+"/"+(.@expneed+1)+" untill Lv "+(MineMaster+1)+"";
				}
			}
		return;
		}
	end;
	}
}








